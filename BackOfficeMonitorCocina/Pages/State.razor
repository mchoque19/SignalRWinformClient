@inject DAL.Interfaces.IGenericRepository<DAL.DAO.State> _stateService
@using Microsoft.AspNetCore.Components.Authorization;
@attribute [Authorize]
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using BackOfficeMonitorCocina.Pages

@page "/state"

<MudTable Items="@stateList" Dense="true" Hover="true" Bordered="false" Striped="true" Filter="new Func<DAL.DAO.State,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h4">Estados</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" aria-label="edit" @onclick="@(addState)" Variant="Variant.Filled" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Nombre</MudTh>
        <MudTh>Order</MudTh>
        <MudTh>Color</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        @if (stateList.Any())
        {
        <MudTd DataLabel="Sign">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Name">@context.Order</MudTd> 
        <MudTd>
                <MudTextField T="string" InputType="InputType.Color" @bind-Text="@context.Color" Disabled />
        </MudTd>
        <MudTd><MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit" @onclick="@((e) => updateState(@context))" /></MudTd>
        }
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
 
 
@code {
    public ColorPickerMode ColorPickerMode { get; set; }

    private IEnumerable<DAL.DAO.State> stateList = Array.Empty<DAL.DAO.State>();

    protected override async Task OnInitializedAsync()
    {
        stateList = await _stateService.GetAll();
    }


    private async void addState()
    {
        var parameters = new DialogParameters();
        var dialog = DialogService.Show<Pages.DialogState>("Nuevo estado", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            stateList = await _stateService.GetAll();
            StateHasChanged();
        }

    }

    private async void updateState(DAL.DAO.State state)
    {

        var parameters = new DialogParameters();
        parameters.Add("state", state);
        var dialog = DialogService.Show<Pages.DialogState>("Editar estado", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            StateHasChanged();
        }
    }

    
    private string searchString1 = "";
    private DAL.DAO.State selectedItem1 = null;
    private HashSet<DAL.DAO.State> selectedItems = new HashSet<DAL.DAO.State>();

    private IEnumerable<DAL.DAO.State> Elements = new List<DAL.DAO.State>();    

    private bool FilterFunc1(DAL.DAO.State element) => FilterFunc(element, searchString1);

    private bool FilterFunc(DAL.DAO.State element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;  
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Id} {element.Name}".Contains(searchString))
            return true;
        return false;
    }
}
