@page "/monitor/{idMonitor:int}"
@inject DAL.Interfaces.IGenericRepository<DAL.DAO.Monitor> _monitorService
@using Microsoft.AspNetCore.Components
@using System.Globalization;
 

<NavMonitor idMonitor="idMonitor" />


<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudSelect Placeholder="Selecciona una familia" T="DAL.DAO.Family" 
        Label="Familia"   Required="true" AdornmentIcon="@Icons.Material.Filled.Search"
                   AdornmentColor="Color.Primary" ValueChanged="OnValueChanged">
            @foreach (var selectItem in familyList)
            {
                <MudSelectItem Value="@selectItem">@selectItem.Name</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
       
    </MudItem>

    <MudItem xs="12" sm="6" md="4">
        @* <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mr-10 ml-4">Guardar</MudButton> *@
    </MudItem>
</MudGrid>

      
  
 

<div class="d-flex mud-width-full align-center mt-8">
    <MudText Typo="Typo.subtitle1" Class="mr-2">Selected values: </MudText>
    <MudChip Color="Color.Secondary">@(familySelect?.Name ?? "Select culture")</MudChip>
</div>
 
 
<MudTable Items="monitor.Articles" Dense="true" Hover="true" Bordered="false" Striped="true" Filter="new Func<DAL.DAO.Article,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h4">Articulos</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Nombre</MudTh>
    </HeaderContent>
    <RowTemplate>
       @if (monitor.Articles.Any())
       {
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
       }
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public int idMonitor { get; set; }
    //obtener info de este monitor
    public DAL.DAO.Monitor monitor = new DAL.DAO.Monitor();  
    //Seleccionar Familia
    public List<DAL.DAO.Family> familyList = new List<DAL.DAO.Family>();    
    public DAL.DAO.Family familySelect { get; set; }
    //Seleccionar Departamento
    public List<DAL.DAO.Department> departmentList = new List<DAL.DAO.Department>();

    //Seleccionar articulosmulti y guardar

 
    private void OnValueChanged(DAL.DAO.Family selected)
    {
        Console.WriteLine(selected.Name);
        //obtener todos los departamentos por familia 
        departmentList
 
    }
 
  
    protected override async Task OnInitializedAsync()
    {    
        monitor = await _monitorService.GetByIdAsync(idMonitor);
        @foreach (var item in monitor.Families)
        {
            familyList.Add(item);          
        }            
    } 
 
   
    //tabla  
    private string searchString1 = "";
    private DAL.DAO.Article selectedItem1 = null;
    private HashSet<DAL.DAO.Article> selectedItems = new HashSet<DAL.DAO.Article>();

    private IEnumerable<DAL.DAO.Article> Elements = new List<DAL.DAO.Article>(); 

    private bool FilterFunc1(DAL.DAO.Article element) => FilterFunc(element, searchString1);

    private bool FilterFunc(DAL.DAO.Article element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Id} {element.Name}".Contains(searchString))
            return true;
        return false;
    }
}
