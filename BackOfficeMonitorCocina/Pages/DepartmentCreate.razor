@page "/departmentNew"
@page "/departmentNew/{Id:int}"
@inject DAL.Interfaces.IGenericRepository<DAL.DAO.Department> _DepartmentRespository
@inject DAL.Interfaces.IGenericRepository<DAL.DAO.Family> _FamilyRespository

@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization;
@attribute [Authorize]

<h3>DepartmentCreate</h3>

<EditForm Model="department">
    <div class="container-fluid">
        <div class="formbtn-group row mb-1">
            <label class="col-sm-3">Nombre</label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="department.Name"></InputText>

             </div>
        </div>
        <div class="formbtn-group row mb-1">
            <label class="col-sm-3">Familias</label>
            <InputSelect class="form-select" @bind-Value="IdFamily">
                @foreach (var item in familyList)
                {
                    if (item.Id == IdFamily)
                    {
                        <option value="@item.Id" selected>@item.Name (IdFamily: @item.Id)</option>
                    }
                    else
                    {    
                        <option value="@item.Id">@item.Name</option>                        
                    }                
                }
            </InputSelect>
        </div>
        <div class="formbtn-group row mb-1">
            <div class="col-sm-12"> 
                <button class="btn btn-primary" @onclick="SaveDepartment">Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    public int IdFamily { get; set; }

    DAL.DAO.Family family = new DAL.DAO.Family();
    public DAL.DAO.Department department = new DAL.DAO.Department();
    private IEnumerable<DAL.DAO.Family> familyList = Array.Empty<DAL.DAO.Family>();



    private async Task SaveDepartment()
    {
        if (Id != 0)
        {
            await base.OnInitializedAsync();
            family = await _FamilyRespository.GetByIdAsync(IdFamily);
            department.Family = family;
            var response = _DepartmentRespository.Update(department);

            if (response)
            {
                Console.WriteLine("exito");
                NavigationManager.NavigateTo("department");
            }
            else
            {
                Console.WriteLine("bad");
            }

        }
        else
        {

            await base.OnInitializedAsync();
            family = await _FamilyRespository.GetByIdAsync(IdFamily);
            department.Family = family;
            var response = _DepartmentRespository.Insert(department);
            if (response)
            {
                Console.WriteLine("exito");
                NavigationManager.NavigateTo("department");
            }
            else
            {
                Console.WriteLine("bad");
            }
            Console.WriteLine(department.Name);
            Console.WriteLine(IdFamily);

        }
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        familyList = await _FamilyRespository.GetAll(); 
        if (Id != 0)
        {

            department = await _DepartmentRespository.GetByIdAsync(Id);
            IdFamily = department.Family.Id;
        }
 
    }
   

}
 