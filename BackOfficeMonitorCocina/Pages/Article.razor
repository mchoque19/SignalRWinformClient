@inject DAL.Interfaces.IGenericRepository<DAL.DAO.Article> _articleService
@inject DAL.Interfaces.IGenericRepository<DAL.DAO.Department> _departmentService

@using Microsoft.AspNetCore.Components.Authorization;
@attribute [Authorize]
@inject IDialogService DialogService
@using BackOfficeMonitorCocina.Pages
@page "/article"

<MudTable Items="@listArticles" Dense="true" Hover="true" Bordered="false" Striped="true" Filter="new Func<DAL.DAO.Article,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h4">Articulos</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" aria-label="edit" @onclick="@(saveArticle)" Variant="Variant.Filled" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Nombre</MudTh>
        <MudTh>Departamento</MudTh>
    </HeaderContent>
    <RowTemplate>
        @if (listArticles.Any())
        {  
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Department">@context.Department.Name</MudTd>
            <MudTd><MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit" @onclick="@((e) => updateArticle(@context, @context.Department.Id))" /></MudTd>
        }
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


 
@code 
{
    //visualizar todos los articulos
    private IEnumerable<DAL.DAO.Article> listArticles = Array.Empty<DAL.DAO.Article>();
    //obtener lista de departamentos
    [Parameter]
    public IEnumerable<DAL.DAO.Department> departmentList { get; set; } = Array.Empty<DAL.DAO.Department>();


    protected override async Task OnInitializedAsync()
    {
        listArticles = await _articleService.GetAll();
        departmentList = await _departmentService.GetAll();
    }

    private async Task saveArticle()
    {
        var parameters = new DialogParameters();
        parameters.Add("departmentList", departmentList);
        var dialogRef = DialogService.Show<Pages.DialogArticle>("Nuevo Articulo", parameters);
        var result = await dialogRef.Result;
        if (!result.Canceled)
        {            
            departmentList = await _departmentService.GetAll();
            StateHasChanged();
        }
    }

    private async Task updateArticle(DAL.DAO.Article article, int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("departmentList", departmentList);
        parameters.Add("idDepartment", id);
        parameters.Add("article", article);
        var dialogRef = DialogService.Show<Pages.DialogArticle>("Nuevo Articulo", parameters);
        var result = await dialogRef.Result;
        if (!result.Canceled)
        {
            StateHasChanged();
        }
    }
    //Inicio Tabla     
    private string searchString1 = "";
    private DAL.DAO.Article selectedItem1 = null;
    private HashSet<DAL.DAO.Article> selectedItems = new HashSet<DAL.DAO.Article>();
    private IEnumerable<DAL.DAO.Article> Elements = new List<DAL.DAO.Article>();   
    private bool FilterFunc1(DAL.DAO.Article element) => FilterFunc(element, searchString1);
    private bool FilterFunc(DAL.DAO.Article element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Id} {element.Name} {element.Department}".Contains(searchString))
            return true;
        return false;
    }
}
